{"version":3,"file":"static/js/571.5a543727.chunk.js","mappings":"mPAoFA,UA9EmB,WACjB,OAA0BA,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KACMC,EAAQF,EAAOG,IAAI,SACnBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CACA,IAAMK,EAAc,mCAAG,oGAEnBX,GAAa,GACbE,EAAS,MAHU,UAKDU,EAAAA,EAAAA,IAAYN,GALX,OAKbO,EALa,OAMnBC,QAAQC,IAAIF,GACZf,EAAS,CAACe,IAPS,kDASnBX,EAAS,KAAMc,SATI,yBAWnBhB,GAAa,GAXM,6EAAH,qDAcpBW,GAfkB,CAgBnB,GAAE,CAACL,IASJ,OACE,4BACE,kBAAMW,SATW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,cAAcC,SAASC,OAAOH,MAAMI,KAAK,IAEzDnB,EAAU,CAAEC,MAAOc,GACpB,EAGG,WACE,kBACEK,KAAK,OACLC,KAAK,SACLC,YAAY,iBACZC,UAAQ,EACRC,aAAcvB,KAEhB,mBAAQmB,KAAK,SAAb,SAAsB,cAEvB1B,IACC,SAAC,KAAD,CACE+B,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CAAC,EACfC,aAAa,gBAGhBlC,IAAS,yBAAG,uBAAqBA,MAC5B,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOuC,UACN,wBACGvC,EAAMwC,KAAI,SAAAC,GACT,OACE,yBACE,UAAC,KAAD,CACEC,IAAIC,EAAAA,EAAAA,IAAoBF,EAAKG,IAC7BC,MAAO,CAAEC,KAAMnC,GAFjB,WAIE,wBAAK8B,EAAKM,SACV,uBAAIN,EAAKO,WANJP,EAAKG,GAUjB,QAKV,C,sICjFKK,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,0CAGEC,EAAQ,mCAAG,oGACCH,EAASvC,IAAI,SADd,cAChB2C,EADgB,yBAEfA,EAASC,MAFM,2CAAH,qDAKRvC,EAAW,mCAAG,WAAMwC,GAAN,uFACFN,EAASvC,IAAT,gBAAsB6C,IADpB,cACnBF,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXE,EAAe,mCAAG,WAAMD,GAAN,uFACNN,EAASvC,IAAT,gBAAsB6C,EAAtB,cADM,cACvBF,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qD","sources":["pages/SearchPost/SearchPost.jsx","services/API.js"],"sourcesContent":["import { getPostDetailsRoute } from 'constants/constants';\nimport React, { useEffect, useState } from 'react';\nimport { Dna } from 'react-loader-spinner';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getPostbyId } from 'services/API';\n\nconst SearchPost = () => {\n  const [posts, setPosts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [params, setParams] = useSearchParams();\n  const query = params.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!query) return;\n    const fetchPostsById = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const res = await getPostbyId(query);\n        console.log(res);\n        setPosts([res]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchPostsById();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const value = e.currentTarget.elements.search.value.trim('');\n\n    setParams({ query: value });\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"enter Post Id \"\n          required\n          defaultValue={query}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isLoading && (\n        <Dna\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"dna-wrapper\"\n        />\n      )}\n      {error && <p>Some error occured: {error}</p>}\n      {posts?.length && (\n        <ul>\n          {posts.map(post => {\n            return (\n              <li key={post.id}>\n                <Link\n                  to={getPostDetailsRoute(post.id)}\n                  state={{ from: location }}\n                >\n                  <h2>{post.title}</h2>\n                  <p>{post.body}</p>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default SearchPost;\n","import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/',\n});\n\nexport const getPosts = async () => {\n  const response = await instance.get('posts');\n  return response.data;\n};\n\nexport const getPostbyId = async postId => {\n  const response = await instance.get(`posts/${postId}`);\n  return response.data;\n};\n\nexport const getPostComments = async postId => {\n  const response = await instance.get(`posts/${postId}/comments`);\n  return response.data;\n};\n"],"names":["useState","posts","setPosts","isLoading","setIsLoading","error","setError","useSearchParams","params","setParams","query","get","location","useLocation","useEffect","fetchPostsById","getPostbyId","res","console","log","message","onSubmit","e","preventDefault","value","currentTarget","elements","search","trim","type","name","placeholder","required","defaultValue","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","length","map","post","to","getPostDetailsRoute","id","state","from","title","body","instance","axios","baseURL","getPosts","response","data","postId","getPostComments"],"sourceRoot":""}