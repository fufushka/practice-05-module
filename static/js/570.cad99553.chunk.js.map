{"version":3,"file":"static/js/570.cad99553.chunk.js","mappings":"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","sources":["pages/PostComments/PostComments.jsx","pages/PostDetails/PostDetails.jsx","services/API.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Dna } from 'react-loader-spinner';\nimport { useParams } from 'react-router-dom';\nimport { getPostComments } from 'services/API';\n\nconst PostComments = () => {\n  const [comments, setComments] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { postId } = useParams();\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        setIsLoading(true);\n        const res = await getPostComments(postId);\n        console.log(res);\n        setComments(res);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchComments();\n  }, [postId]);\n  return (\n    <div>\n      {isLoading && (\n        <Dna\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"dna-wrapper\"\n        />\n      )}\n      {error && <p>Some error occured: {error}</p>}\n      {comments?.length && (\n        <ul>\n          {comments.map(comment => {\n            return (\n              <li key={comment.id}>\n                <h3>Email : {comment.email}</h3>\n                <p>Body : {comment.body}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default PostComments;\n","import { HOME_ROUTE, getPostCommentsRoute } from 'constants/constants';\nimport PostComments from 'pages/PostComments/PostComments';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Dna } from 'react-loader-spinner';\nimport { Link, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { getPostbyId } from 'services/API';\n\nconst PostDetails = () => {\n  const { postId } = useParams();\n  const [postDetails, setpostDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? HOME_ROUTE);\n  const backLinkHref = backLinkRef.current;\n\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      try {\n        setIsLoading(true);\n        const res = await getPostbyId(postId);\n        console.log(res);\n        setpostDetails(res);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchPostDetails();\n  }, [postId]);\n\n  return (\n    <div>\n      <Link to={backLinkHref}>Go back</Link>\n      {isLoading && (\n        <Dna\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"dna-wrapper\"\n        />\n      )}\n      {error && <p>Some error occured: {error}</p>}\n      {postDetails !== null && (\n        <div>\n          <h1>{postDetails.title}</h1>\n          <h2>PostId : {postDetails.id}</h2>\n          <p>Content : {postDetails.body}</p>\n        </div>\n      )}\n      <div>\n        <Link to={getPostCommentsRoute(postId)}>Comments</Link>\n      </div>\n      <Routes>\n        <Route path=\"comments\" element={<PostComments />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default PostDetails;\n","import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/',\n});\n\nexport const getPosts = async () => {\n  const response = await instance.get('posts');\n  return response.data;\n};\n\nexport const getPostbyId = async postId => {\n  const response = await instance.get(`posts/${postId}`);\n  return response.data;\n};\n\nexport const getPostComments = async postId => {\n  const response = await instance.get(`posts/${postId}/comments`);\n  return response.data;\n};\n"],"names":["useState","comments","setComments","isLoading","setIsLoading","error","setError","postId","useParams","useEffect","fetchComments","getPostComments","res","console","log","message","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","length","map","comment","email","body","id","postDetails","setpostDetails","location","useLocation","backLinkHref","useRef","state","from","HOME_ROUTE","current","fetchPostDetails","getPostbyId","to","title","getPostCommentsRoute","path","element","instance","axios","baseURL","getPosts","get","response","data"],"sourceRoot":""}